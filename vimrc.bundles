" ==========================================
" 插件管理,自定义需要的插件集合
" ==========================================
set nocompatible

let g:vimbundle = {}
let g:vimbundle.os = {}
let g:vimbundle.os.linux = has('unix') && !has('macunix') && !has('win32unix')
let g:vimbundle.os.windows = has('win32') || has('win64')

let g:vimbundle.timer = exists('*timer_start')
let g:vimbundle.gui = has('gui_running')
let g:vimbundle.nvim = has('nvim') && exists('*jobwait') && !g:vimbundle.os.windows
let g:vimbundle.tmux = !empty($TMUX)

" inspired by spf13, 修改g:bundle_groups 即可选择安装的插件集合
"Default:      betterdefaults airline
"Filemanager:  filemanager
"Editing:      editing bettermotion
"Programing:   programming syntaxchecking
"Tools:        cscope ctags tmux  { YCM  smartcomplete }
"FuzzyFinder:  { fzf unite ctrlp denite LeaderF }
"Git:          git github
"Lanaguage:    ccpp java html python markdown javascript
"Misc:         goyo emoji docker codesnippets

if !exists('g:bundle_groups')
    let g:bundle_groups=['betterdefaults','airline','filemanager', 
                \ 'editing', 'bettermotion',
                \ 'programming',
                \ 'fzf',
                \ 'cscope', 'ctags','git', 'github', 
                \ 'ccpp',]
endif

" ==========================================
" 使用 vim-plug 管理插件 vim plugin bundle control
" ==========================================
let PLUG_PATH = '~/.vim/bundle'
set rtp+=PLUG_PATH

call plug#begin(PLUG_PATH)

"Color:
Plug 'liuchengxu/space-vim-dark'
Plug 'shiftc/molokai'

if count(g:bundle_groups, 'betterdefaults')
    Plug  'tpope/vim-rsi'       "what for???"
    Plug  'dominikduda/vim_current_word'
    "Plug  'kshenoy/vim-signature'

    Plug  't9md/vim-choosewin', { 'on': '<Plug>(choosewin)' }
    "Plug  'ntpeters/vim-better-whitespace', { 'on': 'StripWhitespace' }

    "if has('patch-8.0.1238')
    "   Plug  'haya14busa/is.vim'
    "   Plug  'osyo-manga/vim-anzu', { 'on': ['<Plug>(anzu-n-with-echo)', '<Plug>(anzu-N-with-echo)'] }
    "else
    Plug  'google/vim-searchindex'
    if !g:vimbundle.nvim
        " how to use below two????
        Plug  'haya14busa/incsearch.vim', { 'on': [ '<Plug>(incsearch-forward)', '<Plug>(incsearch-backward)', '<Plug>(incsearch-stay)' ]}
        Plug  'haya14busa/incsearch-fuzzy.vim', { 'on': [ '<Plug>(incsearch-fuzzy-/)', '<Plug>(incsearch-fuzzy-?)', '<Plug>(incsearch-fuzzy-stay)' ]}
    endif
    "endif

    source ~/.vim/layers/betterdefaults/config.vim
endif

if count(g:bundle_groups, 'airline')
    Plug  'vim-airline/vim-airline-themes'
    Plug  'vim-airline/vim-airline'

    source ~/.vim/layers/airline/config.vim
endif

if count(g:bundle_groups, 'filemanager')
    Plug  'scrooloose/nerdtree', { 'on': ['NERDTreeToggle', 'NERDTreeFind'] }
    " Refer to https://github.com/junegunn/dotfiles/vimrc
    source ~/.vim/layers/filemanager/nerdtree.vim
    autocmd! User nerdtree call layers#filemanager#nerdtree#Init()
    augroup loadNerdtree
        autocmd!
        autocmd VimEnter * silent! autocmd! FileExplorer
        autocmd BufEnter,BufNew *
                    \  if isdirectory(expand('<amatch>'))
                    \|   call plug#load('nerdtree')
                    \|   call nerdtree#checkForBrowse(expand("<amatch>"))
                    \| endif
    augroup END

    Plug  'Xuyuanp/nerdtree-git-plugin', { 'on': ['NERDTreeToggle', 'NERDTreeFind'] }
    " Plug  'danro/rename.vim', { 'on' : 'Rename' }

    source ~/.vim/layers/filemanager/config.vim
endif

if count(g:bundle_groups, 'editing')
    Plug  'tpope/vim-surround'
    Plug  'pelodelfuego/vim-swoop'
    Plug  'terryma/vim-multiple-cursors'
    Plug  'jiangmiao/auto-pairs', { 'on': [] }
    Plug  'scrooloose/nerdcommenter', { 'on': '<Plug>NERDCommenterToggle' }

    " Formatting
    Plug  'Chiel92/vim-autoformat',          { 'on': 'Autoformat' }

    "TextAlign
    Plug  'godlygeek/tabular',        { 'on': 'Tabularize' }
    Plug  'junegunn/vim-easy-align',  { 'on': [ '<Plug>(EasyAlign)', 'EasyAlign' ] }

    augroup vimAutoPairs
        autocmd!
        autocmd CursorHold,CursorHoldI,InsertEnter * call plug#load('auto-pairs') | call AutoPairsTryInit() | autocmd! vimAutoPairs
    augroup END

    source ~/.vim/layers/editing/config.vim
endif

if count(g:bundle_groups, 'bettermotion')
    Plug  'unblevable/quick-scope'

    Plug  'justinmk/vim-sneak'
    Plug  'easymotion/vim-easymotion'
    Plug  'haya14busa/incsearch-easymotion.vim', { 'on': ['<Plug>(easymotion-prefix)','<Plug>(easymotion-bd-f)','<Plug>(easymotion-overwin-f)','<Plug>(easymotion-overwin-f2)','<Plug>(easymotion-bd-jk)','<Plug>(easymotion-overwin-line)','<Plug>(easymotion-bd-w)', '<Plug>(easymotion-overwin-w)',] }

    source ~/.vim/layers/bettermotion/config.vim
endif

if count(g:bundle_groups, 'programming')
    Plug  'luochen1990/rainbow'
    Plug  'sheerun/vim-polyglot'
    Plug  'airblade/vim-rooter'   "what to use for???"

    Plug  'editorconfig/editorconfig-vim', { 'on': 'EditorConfigReload' }
    Plug  'matze/vim-move', { 'on': [ '<Plug>MoveBlockDown', '<Plug>MoveBlockUp', '<Plug>MoveLineDown', '<Plug>MoveLineUp', ]}
    "Plug  'junegunn/rainbow_parentheses.vim',  { 'for': ['lisp', 'clojure', 'scheme'] }

    " Need to disable airline extension for tagbar, see vim-airline issue 1313.
    Plug  'majutsushi/tagbar', { 'on': 'TagbarToggle' }
    Plug  'Yggdroot/indentLine'      ",      { 'on': 'IndentLinesToggle' }
    Plug  'nathanaelkane/vim-indent-guides', { 'on': 'IndentGuidesToggle' }
    "autocmd! User indentLine,vim-indent-guides call layers#programming#indent#Init()

    "Plug  'skywind3000/asyncrun.vim',        { 'on': ['AsyncRun!', 'AsyncRun'] }

    source ~/.vim/layers/programming/config.vim
endif

" Browser fuzzy finder tool{fzf,denite,unite,LeaderF,ctrlp}
if count(g:bundle_groups, 'fzf')
    if !g:vimbundle.os.windows
        Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
        Plug 'junegunn/fzf.vim'

        source ~/.vim/layers/fzf/config.vim
    endif
elseif count(g:bundle_groups, 'denite')
    if g:python_version == 3 && v:version >= 800
        Plug 'shougo/denite.nvim'
    endif
elseif count(g:bundle_groups, 'unite')
    Plug 'Shougo/unite.vim'

    source ~/.vim/layers/unite/config.vim
elseif count(g:bundle_groups, 'LeaderF')
    if g:python_version && executable('gcc')
        if g:vimbundle.os.windows
            Plug 'Yggdroot/LeaderF', { 'do': '.\install.bat' }
        else
            Plug 'Yggdroot/LeaderF', { 'do': './install.sh' }
        endif
    endif
elseif count(g:bundle_groups, 'ctrlp')
    Plug  'ctrlpvim/ctrlp.vim',      { 'on': ['CtrlP', 'CtrlPMRU'] }
    Plug  'FelikZ/ctrlp-py-matcher', { 'on': ['CtrlP', 'CtrlPMRU'] }
    Plug 'tacahiroy/ctrlp-funky'

    source ~/.vim/layers/ctrlp/config.vim
endif

if count(g:bundle_groups, 'cscope')
    Plug  'romainl/vim-qf'

    "source ~/.vim/layers/cscope/config.vim
endif

if count(g:bundle_groups, 'ctags')
    Plug  'ludovicchabant/vim-gutentags',  { 'for': ['c', 'cpp'] }
    autocmd! User vim-gutentags call layers#ctags#config#gutentagsInit()

    source ~/.vim/layers/ctags/config.vim
endif

if count(g:bundle_groups, 'git')
    Plug  'junegunn/gv.vim', { 'on': ['GV', 'GV!'] }

    Plug  'tpope/vim-fugitive'
    Plug  'airblade/vim-gitgutter'

    source ~/.vim/layers/git/config.vim
endif

if count(g:bundle_groups, 'github')
    Plug  'junegunn/vim-github-dashboard', { 'on': ['GHDashboard', 'GHActivity'] }
    Plug  'mattn/webapi-vim',              { 'on': 'Gist' }
    Plug  'mattn/gist-vim',                { 'on': 'Gist' }

    source ~/.vim/layers/github/config.vim
endif

if count(g:bundle_groups, 'syntaxchecking')
    if v:version >= 800
        Plug 'w0rp/ale',  { 'on': [] }
        "Plug 'wsdjeg/FlyGrep.vim'
    else
        Plug 'scrooloose/syntastic',     { 'on': 'SyntasticCheck' }
    endif

    source ~/.vim/layers/syntaxchecking/config.vim
endif

if count(g:bundle_groups, 'ccpp')
    Plug  'rhysd/vim-clang-format',           { 'for': [ 'c', 'cpp' ] }
    Plug  'octol/vim-cpp-enhanced-highlight', { 'for': [ 'c', 'cpp' ] }

    source ~/.vim/layers/ccpp/config.vim
endif

"{
if count(g:bundle_groups, 'under-test')
    if has('python3') && executable('python3')
        let g:python_version = 3
        if !g:vimbundle.os.windows
            silent! python3 1
        endif
    elseif has('python') && executable('python')
        let g:python_version = 2
        if !g:vimbundle.os.windows
            silent! python 1
        endif
    else
        let g:python_version = 0
    endif

    Plug 'jistr/vim-nerdtree-tabs'
    Plug 'tpope/vim-commentary'
    Plug 'mbbill/undotree'
    Plug 'tpope/vim-repeat'
    Plug 'brooth/far.vim'
    Plug 'thinca/vim-quickrun'
    " ctrlspace
    Plug 'vim-ctrlspace/vim-ctrlspace'

    if executable('ag') || executable('ack') || executable('rg') || executable('pt')
        Plug 'dyng/ctrlsf.vim'
    elseif v:version >= 800 && !g:vimbundle.os.windows && executable('ctags')
        Plug 'damage220/vim-finder'
    endif

    " signs
    if has('signs')
        Plug 'gorodinskiy/vim-coloresque'
        Plug 'rhysd/conflict-marker.vim'
        Plug 'mhinz/vim-signify'
    endif
    Plug 'bling/vim-bufferline'

    " Pymode for python
    if count(g:bundle_groups, 'pymode') && g:python_version
        Plug 'python-mode/python-mode', { 'for': 'python', 'branch': 'develop' }
    endif


" Autocompletion engine && complete_snippet
    " { YCM,
    " { smartcomplete: deoplete,coc,asyncomplete,neocomplete,neocomplcache }
    let g:complete_engine  = "None"
    let g:smart_engine_select = 1
    let g:complete_snippet = "ultisnips"

    " complete engines
    " YCM 
    if count(g:bundle_groups, 'YCM')
        if executable('cmake') && g:python_version && !g:vimbundle.os.windows
            let g:complete_engine = "YCM"
            let g:smart_engine_select = 0
        endif
    " smart select, if not use YCM engine
    elseif count(g:bundle_groups, 'smartcomplete') && g:smart_engine_select
        if v:version >= 800
            if g:python_version == 3
                let g:complete_engine = "deoplete"
            elseif v:version >= 801 && executable('node') && executable('yarn')
                let g:complete_engine = "coc"
            else
                let g:complete_engine = "asyncomplete"
            endif
        elseif has('lua')
            let g:complete_engine = "neocomplete"
        else
            let g:complete_engine = "neocomplcache"
        endif
    endif
    unlet g:smart_engine_select

    " install snippets plugins
    if g:complete_engine != "None"
        Plug 'Shougo/neco-vim'
    endif
    if g:complete_engine == "neocomplete" || g:complete_engine == "neocomplcache" || count(g:bundle_groups, 'snippet')
        if g:python_version &&  g:complete_snippet == "ultisnips"
            " Refer to https://github.com/junegunn/vim-plug/wiki/faq
            " Load on nothing
            Plug  'SirVer/ultisnips', { 'on': [] }
            Plug  'honza/vim-snippets', { 'on': [] }
            "Plug 'leoatchina/leoatchina-snippets'

            augroup loadSnips
                autocmd!
                autocmd InsertEnter * call plug#load('ultisnips', 'vim-snippets')
                            \| autocmd! loadSnips
            augroup END

            source ~/.vim/layers/codesnippets/config.vim
        else
            let g:complete_snippet = "neosnippet"
            Plug 'Shougo/neosnippet'
            Plug 'Shougo/neosnippet-snippets'
        endif
    else
        let g:complete_snippet = "None"
    endif

    " install complete plugins
    if g:complete_engine == "YCM"
        if g:python_version == 2
            Plug 'Valloric/YouCompleteMe',{ 'do' : 'python2 ./install.py --clang-completer' }
        elseif g:python_version == 3
            Plug 'Valloric/YouCompleteMe',{ 'do' : 'python3 ./install.py --clang-completer' }
        endif
    elseif g:complete_engine == "deoplete"
        Plug 'Shougo/deoplete.nvim'
        Plug 'roxma/vim-hug-neovim-rpc'
        Plug 'roxma/nvim-yarp'
        Plug 'Shougo/neoinclude.vim'
        Plug 'zchee/deoplete-clang', {'for': ['c', 'cpp']}
        Plug 'zchee/deoplete-jedi', {'for': 'python'}
        if count(g:bundle_groups, 'javascript')
            Plug 'carlitux/deoplete-ternjs'
        endif
    elseif g:complete_engine == "coc"
        Plug 'neoclide/coc.nvim', {'do': './install.sh'}
    elseif g:complete_engine == "asyncomplete"
        Plug 'prabirshrestha/asyncomplete.vim'
        Plug 'prabirshrestha/async.vim'
        Plug 'prabirshrestha/vim-lsp'
        Plug 'prabirshrestha/asyncomplete-lsp.vim'
        Plug 'yami-beta/asyncomplete-omni.vim'
        Plug 'prabirshrestha/asyncomplete-buffer.vim'
        Plug 'prabirshrestha/asyncomplete-emoji.vim'
        Plug 'prabirshrestha/asyncomplete-file.vim'
        Plug 'prabirshrestha/asyncomplete-tags.vim'
        Plug 'Shougo/neco-syntax'
        Plug 'prabirshrestha/asyncomplete-necovim.vim'
        Plug 'prabirshrestha/asyncomplete-necosyntax.vim'
        if g:complete_snippet == 'ultisnips'
            Plug 'prabirshrestha/asyncomplete-ultisnips.vim'
        elseif g:complete_snippet == 'neosnippet'
            Plug 'prabirshrestha/asyncomplete-neosnippet.vim'
        endif
    elseif g:complete_engine == "neocomplete"
        Plug 'Shougo/neoinclude.vim'
        Plug 'Shougo/neocomplete.vim'
    elseif g:complete_engine == "neocomplcache"
        Plug 'Shougo/neocomplcache.vim'
        if g:complete_snippet == 'ultisnips'
            Plug 'JazzCore/neocomplcache-ultisnips'
        endif
    endif
endif
"}

call plug#end()
